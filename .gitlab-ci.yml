# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages

variables:
  VERSION: 0.0.1
  IMAGE_NAME: arazel/sea-chuck-bot:${VERSION}

stages:          # List of stages for jobs, and their order of execution
  - build
  - push
  - deploy

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  script:
    - echo "Compiling the code..."
    - mvn spring-boot:build-image -Dspring-boot.build-image.imageName=${IMAGE_NAME} -DskipTests
    - echo "Compile complete."
  tags:
    - sea-runner
  only:
    - development

push-image:   # This job runs in the test stage.
  stage: push    # It only starts when the job in the build stage completes successfully.
  script:
    - docker login -u arazel -p $DOCKER_TOKEN
    - docker push ${IMAGE_NAME}
  tags:
    - sea-runner
  only:
    - development

deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  script:
    - cp -R ./data /home/sea/
    - docker-compose pull
    - docker-compose stop
    - docker-compose create
    - docker-compose start
  tags:
    - sea-runner
  only:
    - development